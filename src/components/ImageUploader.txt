import React, { useState } from "react";import imageCompression from "browser-image-compression";import { ref, uploadBytes, getDownloadURL } from "firebase/storage";import { storage } from "../config/firebase"; // adjust path if neededconst ImageUploader = () => {  const [url, setUrl] = useState("");  const [uploading, setUploading] = useState(false);  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {    const file = e.target.files?.[0];    if (!file) return;    if (file.size > 5 * 1024 * 1024) {      alert("File too large! Max 5MB.");      return;    }    try {      setUploading(true);      const compressedFile = await imageCompression(file, {        maxSizeMB: 0.5,        maxWidthOrHeight: 1024,        useWebWorker: true,      });      const storageRef = ref(storage, `images/${compressedFile.name}`);      await uploadBytes(storageRef, compressedFile);      const downloadURL = await getDownloadURL(storageRef);      setUrl(downloadURL);      alert("? Upload successful!");    } catch (error) {      console.error("Upload error:", error);    } finally {      setUploading(false);    }  };  return (    <div>      <input type="file" accept="image/*" onChange={handleFileChange} />      {uploading && <p>Uploading...</p>}      {url && (        <div>          <img src={url} alt="Uploaded" width="200" />        </div>      )}    </div>  );};export default ImageUploader;